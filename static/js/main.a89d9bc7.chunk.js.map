{"version":3,"sources":["image/hand.png","pages/gameStart.js","pages/game.js","pages/gameOver.js","App.js","reportWebVitals.js","index.js"],"names":["GameStart","className","src","Image","alt","to","letters","Game","useState","prize","setPrize","questionIndex","setQuestionIndex","selectedAnswerIndex","setSelectedAnswerIndex","history","useHistory","selectedLevel","data","filter","elem","index","console","log","getBorderColor","correct_answer","map","question","answers","answer","onClick","setTimeout","length","push","sum","getResult","withRouter","props","state","location","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a89d9bc7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/hand.7467c776.png\";","import {Link} from 'react-router-dom';\nimport Image from '../image/hand.png'\n\nconst GameStart = () => {\n    return(\n        <div className=\"mainPages firstPageCover\">\n            <div>\n                <img className=\"imgHand\" src={Image} alt=\"A hand\"/>\n            </div>\n            <div>\n                <p className=\"title\">Who wants to be aÂ millionaire?</p>\n                <Link to=\"/game\">\n                    <button className=\"orangeButton\">Start</button>\n                </Link>\n\n            </div>\n        </div>\n    )\n}\n\nexport default GameStart;","import React, { useState } from 'react';\nimport {useHistory} from 'react-router-dom';\nimport data from '../data.json'\n\nconst letters = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"];\n\nconst Game = () => {\n    const [prize, setPrize] = useState(0)\n    const [questionIndex, setQuestionIndex] = useState(0);\n    const [selectedAnswerIndex, setSelectedAnswerIndex] = useState(null);\n    const history = useHistory();\n\n    const selectedLevel= data.filter((elem, index)=> index===questionIndex)\n    console.log(typeof selectedLevel)\n\n    const getResult = ((elem, index) =>{\n        setSelectedAnswerIndex(index)\n        setTimeout(() => {\n            setSelectedAnswerIndex(null)\n            if(elem.correct_answer === index){\n                if (data.length - 1 === questionIndex) {\n                    history.push('/gameOver', {sum: elem.prize});\n                }\n                const num = questionIndex + 1\n                setQuestionIndex(num)\n                setPrize(elem.prize)\n            } else {\n                history.push('/gameOver', {sum: prize});\n            }\n        }, 1000)\n    })\n\n    const getBorderColor = (index, correct_answer) => {\n        if (selectedAnswerIndex === index) {\n            return correct_answer === index ? 'correctAnswer' : 'wrongAnswer'\n        }\n        if (selectedAnswerIndex !== null && correct_answer === index) {\n            return 'correctAnswer'\n        }\n        return ''\n    }\n\n    return(\n        <div className=\"container2\">\n            <div>\n                {selectedLevel.map((elem) =>{\n                   return  (\n                    <div>\n                        <div>\n                            <p  className=\"question\">{elem.question}</p>\n                        </div>\n                        <div className=\"answerOptionsContainer\">\n                            {elem.answers.map((answer, index) => (\n                                <div onClick={() => getResult(elem, index)}>\n                                    <p className={`answerOptions blackText ${getBorderColor(index, elem.correct_answer)}`}>\n                                        <span className=\"value\">{letters[index]}</span>\n                                        {answer}\n                                    </p>\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n                   )\n                })}\n            </div>\n\n            <div className=\"prizeTable\">\n                {data.map(({prize}, index)=><div key={index} className = {index === questionIndex ? \"activeScore\" : \"score\"}>\n                   <p className=\"blackText\">{prize}</p></div>)}\n            </div>\n\n        </div>\n    )\n}\n\nexport default Game;","import {Link} from \"react-router-dom\";\nimport Image from \"../image/hand.png\";\nimport { withRouter } from \"react-router\";\n\nconst GameOver = (props) => {\n    const state = props.location.state;\n    console.log(state)\n    return(\n        <div className=\"mainPages lastPageCover\">\n            <div>\n                <img className=\"imgHand\" src={Image} alt=\"A hand\"/>\n            </div>\n            <div className=\"titlePosition\">\n                <p className=\"titleTotalScore\">Total score:</p>\n                <p className=\"earned\">{state.sum} earned</p>\n                <Link to=\"/gameStart\">\n                    <button className=\"orangeButton\">Try again</button>\n                </Link>\n            </div>\n        </div>\n\n\n\n    )\n}\n\nexport default  withRouter(GameOver);","import './App.css';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route\n} from \"react-router-dom\";\nimport GameStart from \"./pages/gameStart\";\nimport Game from \"./pages/game\";\nimport GameOver from \"./pages/gameOver\";\n\nfunction App() {\n  return (\n    <Router>\n        <Switch>\n            <Route path = '/game'>\n                <Game />\n            </Route>\n            <Route path = '/gameOver'>\n                <GameOver />\n            </Route>\n            <Route path = '/'>\n                <GameStart />\n            </Route>\n        </Switch>\n    </Router>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n   <BrowserRouter>\n    <App />\n   </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}